//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.AccountType = {
  'STANDARD' : 0,
  'PREMIUM' : 1
};
ttypes.availableCurrencySet = {
  'PLN' : 0,
  'EUR' : 1,
  'USD' : 2,
  'GBP' : 3,
  'HUF' : 4,
  'JPY' : 5
};
var Account = module.exports.Account = function(args) {
  this.name = null;
  this.surname = null;
  this.pesel = null;
  this.password = null;
  this.accountType = null;
  this.balance = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.surname !== undefined && args.surname !== null) {
      this.surname = args.surname;
    }
    if (args.pesel !== undefined && args.pesel !== null) {
      this.pesel = args.pesel;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.accountType !== undefined && args.accountType !== null) {
      this.accountType = args.accountType;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
  }
};
Account.prototype = {};
Account.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.surname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pesel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.accountType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.balance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Account.prototype.write = function(output) {
  output.writeStructBegin('Account');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.surname !== null && this.surname !== undefined) {
    output.writeFieldBegin('surname', Thrift.Type.STRING, 2);
    output.writeString(this.surname);
    output.writeFieldEnd();
  }
  if (this.pesel !== null && this.pesel !== undefined) {
    output.writeFieldBegin('pesel', Thrift.Type.STRING, 3);
    output.writeString(this.pesel);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.accountType !== null && this.accountType !== undefined) {
    output.writeFieldBegin('accountType', Thrift.Type.I32, 5);
    output.writeI32(this.accountType);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.balance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateAccountRequest = module.exports.CreateAccountRequest = function(args) {
  this.name = null;
  this.surname = null;
  this.pesel = null;
  this.incomeDeclaration = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.surname !== undefined && args.surname !== null) {
      this.surname = args.surname;
    }
    if (args.pesel !== undefined && args.pesel !== null) {
      this.pesel = args.pesel;
    }
    if (args.incomeDeclaration !== undefined && args.incomeDeclaration !== null) {
      this.incomeDeclaration = args.incomeDeclaration;
    }
  }
};
CreateAccountRequest.prototype = {};
CreateAccountRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.surname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pesel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.incomeDeclaration = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateAccountRequest.prototype.write = function(output) {
  output.writeStructBegin('CreateAccountRequest');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.surname !== null && this.surname !== undefined) {
    output.writeFieldBegin('surname', Thrift.Type.STRING, 2);
    output.writeString(this.surname);
    output.writeFieldEnd();
  }
  if (this.pesel !== null && this.pesel !== undefined) {
    output.writeFieldBegin('pesel', Thrift.Type.STRING, 3);
    output.writeString(this.pesel);
    output.writeFieldEnd();
  }
  if (this.incomeDeclaration !== null && this.incomeDeclaration !== undefined) {
    output.writeFieldBegin('incomeDeclaration', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.incomeDeclaration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccountCreatedResponse = module.exports.AccountCreatedResponse = function(args) {
  this.confirmationMessage = null;
  this.password = null;
  this.accountType = null;
  if (args) {
    if (args.confirmationMessage !== undefined && args.confirmationMessage !== null) {
      this.confirmationMessage = args.confirmationMessage;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.accountType !== undefined && args.accountType !== null) {
      this.accountType = args.accountType;
    }
  }
};
AccountCreatedResponse.prototype = {};
AccountCreatedResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.confirmationMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.accountType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccountCreatedResponse.prototype.write = function(output) {
  output.writeStructBegin('AccountCreatedResponse');
  if (this.confirmationMessage !== null && this.confirmationMessage !== undefined) {
    output.writeFieldBegin('confirmationMessage', Thrift.Type.STRING, 1);
    output.writeString(this.confirmationMessage);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.accountType !== null && this.accountType !== undefined) {
    output.writeFieldBegin('accountType', Thrift.Type.I32, 3);
    output.writeI32(this.accountType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthorisationData = module.exports.AuthorisationData = function(args) {
  this.pesel = null;
  this.password = null;
  if (args) {
    if (args.pesel !== undefined && args.pesel !== null) {
      this.pesel = args.pesel;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
AuthorisationData.prototype = {};
AuthorisationData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pesel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthorisationData.prototype.write = function(output) {
  output.writeStructBegin('AuthorisationData');
  if (this.pesel !== null && this.pesel !== undefined) {
    output.writeFieldBegin('pesel', Thrift.Type.STRING, 1);
    output.writeString(this.pesel);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoanRequest = module.exports.LoanRequest = function(args) {
  this.pesel = null;
  this.password = null;
  this.currency = null;
  this.amount = null;
  this.monthsPeriod = null;
  if (args) {
    if (args.pesel !== undefined && args.pesel !== null) {
      this.pesel = args.pesel;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.monthsPeriod !== undefined && args.monthsPeriod !== null) {
      this.monthsPeriod = args.monthsPeriod;
    }
  }
};
LoanRequest.prototype = {};
LoanRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pesel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.currency = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.amount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.monthsPeriod = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoanRequest.prototype.write = function(output) {
  output.writeStructBegin('LoanRequest');
  if (this.pesel !== null && this.pesel !== undefined) {
    output.writeFieldBegin('pesel', Thrift.Type.STRING, 1);
    output.writeString(this.pesel);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.I32, 3);
    output.writeI32(this.currency);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.amount);
    output.writeFieldEnd();
  }
  if (this.monthsPeriod !== null && this.monthsPeriod !== undefined) {
    output.writeFieldBegin('monthsPeriod', Thrift.Type.I64, 5);
    output.writeI64(this.monthsPeriod);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoanOffer = module.exports.LoanOffer = function(args) {
  this.currency = null;
  this.amount = null;
  this.constInRequestedCurrency = null;
  this.costInNativeCurrency = null;
  this.totalAmountToPay = null;
  this.installment = null;
  if (args) {
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.constInRequestedCurrency !== undefined && args.constInRequestedCurrency !== null) {
      this.constInRequestedCurrency = args.constInRequestedCurrency;
    }
    if (args.costInNativeCurrency !== undefined && args.costInNativeCurrency !== null) {
      this.costInNativeCurrency = args.costInNativeCurrency;
    }
    if (args.totalAmountToPay !== undefined && args.totalAmountToPay !== null) {
      this.totalAmountToPay = args.totalAmountToPay;
    }
    if (args.installment !== undefined && args.installment !== null) {
      this.installment = args.installment;
    }
  }
};
LoanOffer.prototype = {};
LoanOffer.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.currency = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.amount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.constInRequestedCurrency = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.costInNativeCurrency = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.totalAmountToPay = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.installment = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoanOffer.prototype.write = function(output) {
  output.writeStructBegin('LoanOffer');
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.I32, 1);
    output.writeI32(this.currency);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.amount);
    output.writeFieldEnd();
  }
  if (this.constInRequestedCurrency !== null && this.constInRequestedCurrency !== undefined) {
    output.writeFieldBegin('constInRequestedCurrency', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.constInRequestedCurrency);
    output.writeFieldEnd();
  }
  if (this.costInNativeCurrency !== null && this.costInNativeCurrency !== undefined) {
    output.writeFieldBegin('costInNativeCurrency', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.costInNativeCurrency);
    output.writeFieldEnd();
  }
  if (this.totalAmountToPay !== null && this.totalAmountToPay !== undefined) {
    output.writeFieldBegin('totalAmountToPay', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.totalAmountToPay);
    output.writeFieldEnd();
  }
  if (this.installment !== null && this.installment !== undefined) {
    output.writeFieldBegin('installment', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.installment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CurrencyNotAvailableException = module.exports.CurrencyNotAvailableException = function(args) {
  Thrift.TException.call(this, "CurrencyNotAvailableException");
  this.name = "CurrencyNotAvailableException";
  this.currency = null;
  this.message = null;
  if (args) {
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(CurrencyNotAvailableException, Thrift.TException);
CurrencyNotAvailableException.prototype.name = 'CurrencyNotAvailableException';
CurrencyNotAvailableException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.currency = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CurrencyNotAvailableException.prototype.write = function(output) {
  output.writeStructBegin('CurrencyNotAvailableException');
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.I32, 1);
    output.writeI32(this.currency);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserDoNotExistException = module.exports.UserDoNotExistException = function(args) {
  Thrift.TException.call(this, "UserDoNotExistException");
  this.name = "UserDoNotExistException";
  this.pesel = null;
  this.message = null;
  if (args) {
    if (args.pesel !== undefined && args.pesel !== null) {
      this.pesel = args.pesel;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UserDoNotExistException, Thrift.TException);
UserDoNotExistException.prototype.name = 'UserDoNotExistException';
UserDoNotExistException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pesel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserDoNotExistException.prototype.write = function(output) {
  output.writeStructBegin('UserDoNotExistException');
  if (this.pesel !== null && this.pesel !== undefined) {
    output.writeFieldBegin('pesel', Thrift.Type.STRING, 1);
    output.writeString(this.pesel);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserAlreadyExistException = module.exports.UserAlreadyExistException = function(args) {
  Thrift.TException.call(this, "UserAlreadyExistException");
  this.name = "UserAlreadyExistException";
  this.pesel = null;
  this.message = null;
  if (args) {
    if (args.pesel !== undefined && args.pesel !== null) {
      this.pesel = args.pesel;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(UserAlreadyExistException, Thrift.TException);
UserAlreadyExistException.prototype.name = 'UserAlreadyExistException';
UserAlreadyExistException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pesel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAlreadyExistException.prototype.write = function(output) {
  output.writeStructBegin('UserAlreadyExistException');
  if (this.pesel !== null && this.pesel !== undefined) {
    output.writeFieldBegin('pesel', Thrift.Type.STRING, 1);
    output.writeString(this.pesel);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidPasswordException = module.exports.InvalidPasswordException = function(args) {
  Thrift.TException.call(this, "InvalidPasswordException");
  this.name = "InvalidPasswordException";
  this.pesel = null;
  this.message = null;
  if (args) {
    if (args.pesel !== undefined && args.pesel !== null) {
      this.pesel = args.pesel;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidPasswordException, Thrift.TException);
InvalidPasswordException.prototype.name = 'InvalidPasswordException';
InvalidPasswordException.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pesel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPasswordException.prototype.write = function(output) {
  output.writeStructBegin('InvalidPasswordException');
  if (this.pesel !== null && this.pesel !== undefined) {
    output.writeFieldBegin('pesel', Thrift.Type.STRING, 1);
    output.writeString(this.pesel);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

