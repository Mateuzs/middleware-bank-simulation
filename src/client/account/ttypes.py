#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class AccountType(object):
    STANDARD = 0
    PREMIUM = 1

    _VALUES_TO_NAMES = {
        0: "STANDARD",
        1: "PREMIUM",
    }

    _NAMES_TO_VALUES = {
        "STANDARD": 0,
        "PREMIUM": 1,
    }


class availableCurrencySet(object):
    PLN = 0
    EUR = 1
    USD = 2
    GBP = 3
    HUF = 4
    JPY = 5

    _VALUES_TO_NAMES = {
        0: "PLN",
        1: "EUR",
        2: "USD",
        3: "GBP",
        4: "HUF",
        5: "JPY",
    }

    _NAMES_TO_VALUES = {
        "PLN": 0,
        "EUR": 1,
        "USD": 2,
        "GBP": 3,
        "HUF": 4,
        "JPY": 5,
    }


class CreateAccountRequest(object):
    """
    Attributes:
     - name
     - surname
     - pesel
     - incomeDeclaration

    """


    def __init__(self, name=None, surname=None, pesel=None, incomeDeclaration=None,):
        self.name = name
        self.surname = surname
        self.pesel = pesel
        self.incomeDeclaration = incomeDeclaration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.surname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pesel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.incomeDeclaration = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreateAccountRequest')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.surname is not None:
            oprot.writeFieldBegin('surname', TType.STRING, 2)
            oprot.writeString(self.surname.encode('utf-8') if sys.version_info[0] == 2 else self.surname)
            oprot.writeFieldEnd()
        if self.pesel is not None:
            oprot.writeFieldBegin('pesel', TType.STRING, 3)
            oprot.writeString(self.pesel.encode('utf-8') if sys.version_info[0] == 2 else self.pesel)
            oprot.writeFieldEnd()
        if self.incomeDeclaration is not None:
            oprot.writeFieldBegin('incomeDeclaration', TType.DOUBLE, 4)
            oprot.writeDouble(self.incomeDeclaration)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccountCreatedResponse(object):
    """
    Attributes:
     - confirmationMessage
     - password
     - accountType

    """


    def __init__(self, confirmationMessage=None, password=None, accountType=None,):
        self.confirmationMessage = confirmationMessage
        self.password = password
        self.accountType = accountType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.confirmationMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.accountType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AccountCreatedResponse')
        if self.confirmationMessage is not None:
            oprot.writeFieldBegin('confirmationMessage', TType.STRING, 1)
            oprot.writeString(self.confirmationMessage.encode('utf-8') if sys.version_info[0] == 2 else self.confirmationMessage)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.accountType is not None:
            oprot.writeFieldBegin('accountType', TType.I32, 3)
            oprot.writeI32(self.accountType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthorisationData(object):
    """
    Attributes:
     - pesel
     - password

    """


    def __init__(self, pesel=None, password=None,):
        self.pesel = pesel
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pesel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthorisationData')
        if self.pesel is not None:
            oprot.writeFieldBegin('pesel', TType.STRING, 1)
            oprot.writeString(self.pesel.encode('utf-8') if sys.version_info[0] == 2 else self.pesel)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthorisationResponse(object):
    """
    Attributes:
     - message
     - accountType

    """


    def __init__(self, message=None, accountType=None,):
        self.message = message
        self.accountType = accountType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.accountType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthorisationResponse')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.accountType is not None:
            oprot.writeFieldBegin('accountType', TType.I32, 2)
            oprot.writeI32(self.accountType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Account(object):
    """
    Attributes:
     - name
     - surname
     - authorisationData
     - accountType
     - balance

    """


    def __init__(self, name=None, surname=None, authorisationData=None, accountType=None, balance=None,):
        self.name = name
        self.surname = surname
        self.authorisationData = authorisationData
        self.accountType = accountType
        self.balance = balance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.surname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.authorisationData = AuthorisationData()
                    self.authorisationData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.accountType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.balance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Account')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.surname is not None:
            oprot.writeFieldBegin('surname', TType.STRING, 2)
            oprot.writeString(self.surname.encode('utf-8') if sys.version_info[0] == 2 else self.surname)
            oprot.writeFieldEnd()
        if self.authorisationData is not None:
            oprot.writeFieldBegin('authorisationData', TType.STRUCT, 3)
            self.authorisationData.write(oprot)
            oprot.writeFieldEnd()
        if self.accountType is not None:
            oprot.writeFieldBegin('accountType', TType.I32, 4)
            oprot.writeI32(self.accountType)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.DOUBLE, 5)
            oprot.writeDouble(self.balance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoanRequest(object):
    """
    Attributes:
     - authorisationData
     - currency
     - amount
     - monthsPeriod

    """


    def __init__(self, authorisationData=None, currency=None, amount=None, monthsPeriod=None,):
        self.authorisationData = authorisationData
        self.currency = currency
        self.amount = amount
        self.monthsPeriod = monthsPeriod

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.authorisationData = AuthorisationData()
                    self.authorisationData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.currency = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.amount = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.monthsPeriod = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoanRequest')
        if self.authorisationData is not None:
            oprot.writeFieldBegin('authorisationData', TType.STRUCT, 1)
            self.authorisationData.write(oprot)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.I32, 2)
            oprot.writeI32(self.currency)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.DOUBLE, 3)
            oprot.writeDouble(self.amount)
            oprot.writeFieldEnd()
        if self.monthsPeriod is not None:
            oprot.writeFieldBegin('monthsPeriod', TType.I64, 4)
            oprot.writeI64(self.monthsPeriod)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoanOffer(object):
    """
    Attributes:
     - currency
     - amount
     - costInRequestedCurrency
     - costInNativeCurrency
     - totalAmountToPay
     - installmentInRequestedCurrency
     - installmentInNativeCurrency

    """


    def __init__(self, currency=None, amount=None, costInRequestedCurrency=None, costInNativeCurrency=None, totalAmountToPay=None, installmentInRequestedCurrency=None, installmentInNativeCurrency=None,):
        self.currency = currency
        self.amount = amount
        self.costInRequestedCurrency = costInRequestedCurrency
        self.costInNativeCurrency = costInNativeCurrency
        self.totalAmountToPay = totalAmountToPay
        self.installmentInRequestedCurrency = installmentInRequestedCurrency
        self.installmentInNativeCurrency = installmentInNativeCurrency

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.currency = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.amount = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.costInRequestedCurrency = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.costInNativeCurrency = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.totalAmountToPay = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.installmentInRequestedCurrency = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.installmentInNativeCurrency = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoanOffer')
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.I32, 1)
            oprot.writeI32(self.currency)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.DOUBLE, 2)
            oprot.writeDouble(self.amount)
            oprot.writeFieldEnd()
        if self.costInRequestedCurrency is not None:
            oprot.writeFieldBegin('costInRequestedCurrency', TType.DOUBLE, 3)
            oprot.writeDouble(self.costInRequestedCurrency)
            oprot.writeFieldEnd()
        if self.costInNativeCurrency is not None:
            oprot.writeFieldBegin('costInNativeCurrency', TType.DOUBLE, 4)
            oprot.writeDouble(self.costInNativeCurrency)
            oprot.writeFieldEnd()
        if self.totalAmountToPay is not None:
            oprot.writeFieldBegin('totalAmountToPay', TType.DOUBLE, 5)
            oprot.writeDouble(self.totalAmountToPay)
            oprot.writeFieldEnd()
        if self.installmentInRequestedCurrency is not None:
            oprot.writeFieldBegin('installmentInRequestedCurrency', TType.DOUBLE, 6)
            oprot.writeDouble(self.installmentInRequestedCurrency)
            oprot.writeFieldEnd()
        if self.installmentInNativeCurrency is not None:
            oprot.writeFieldBegin('installmentInNativeCurrency', TType.DOUBLE, 7)
            oprot.writeDouble(self.installmentInNativeCurrency)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CurrencyNotAvailableException(TException):
    """
    Attributes:
     - currency
     - message

    """


    def __init__(self, currency=None, message=None,):
        self.currency = currency
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.currency = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CurrencyNotAvailableException')
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.I32, 1)
            oprot.writeI32(self.currency)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserDoNotExistException(TException):
    """
    Attributes:
     - pesel
     - message

    """


    def __init__(self, pesel=None, message=None,):
        self.pesel = pesel
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pesel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserDoNotExistException')
        if self.pesel is not None:
            oprot.writeFieldBegin('pesel', TType.STRING, 1)
            oprot.writeString(self.pesel.encode('utf-8') if sys.version_info[0] == 2 else self.pesel)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserAlreadyExistException(TException):
    """
    Attributes:
     - pesel
     - message

    """


    def __init__(self, pesel=None, message=None,):
        self.pesel = pesel
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pesel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserAlreadyExistException')
        if self.pesel is not None:
            oprot.writeFieldBegin('pesel', TType.STRING, 1)
            oprot.writeString(self.pesel.encode('utf-8') if sys.version_info[0] == 2 else self.pesel)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InvalidPasswordException(TException):
    """
    Attributes:
     - pesel
     - message

    """


    def __init__(self, pesel=None, message=None,):
        self.pesel = pesel
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pesel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidPasswordException')
        if self.pesel is not None:
            oprot.writeFieldBegin('pesel', TType.STRING, 1)
            oprot.writeString(self.pesel.encode('utf-8') if sys.version_info[0] == 2 else self.pesel)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(CreateAccountRequest)
CreateAccountRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'surname', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'pesel', 'UTF8', None, ),  # 3
    (4, TType.DOUBLE, 'incomeDeclaration', None, None, ),  # 4
)
all_structs.append(AccountCreatedResponse)
AccountCreatedResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'confirmationMessage', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
    (3, TType.I32, 'accountType', None, None, ),  # 3
)
all_structs.append(AuthorisationData)
AuthorisationData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pesel', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)
all_structs.append(AuthorisationResponse)
AuthorisationResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    (2, TType.I32, 'accountType', None, None, ),  # 2
)
all_structs.append(Account)
Account.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'surname', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'authorisationData', [AuthorisationData, None], None, ),  # 3
    (4, TType.I32, 'accountType', None, None, ),  # 4
    (5, TType.DOUBLE, 'balance', None, None, ),  # 5
)
all_structs.append(LoanRequest)
LoanRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'authorisationData', [AuthorisationData, None], None, ),  # 1
    (2, TType.I32, 'currency', None, None, ),  # 2
    (3, TType.DOUBLE, 'amount', None, None, ),  # 3
    (4, TType.I64, 'monthsPeriod', None, None, ),  # 4
)
all_structs.append(LoanOffer)
LoanOffer.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'currency', None, None, ),  # 1
    (2, TType.DOUBLE, 'amount', None, None, ),  # 2
    (3, TType.DOUBLE, 'costInRequestedCurrency', None, None, ),  # 3
    (4, TType.DOUBLE, 'costInNativeCurrency', None, None, ),  # 4
    (5, TType.DOUBLE, 'totalAmountToPay', None, None, ),  # 5
    (6, TType.DOUBLE, 'installmentInRequestedCurrency', None, None, ),  # 6
    (7, TType.DOUBLE, 'installmentInNativeCurrency', None, None, ),  # 7
)
all_structs.append(CurrencyNotAvailableException)
CurrencyNotAvailableException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'currency', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
all_structs.append(UserDoNotExistException)
UserDoNotExistException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pesel', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
all_structs.append(UserAlreadyExistException)
UserAlreadyExistException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pesel', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
all_structs.append(InvalidPasswordException)
InvalidPasswordException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pesel', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
